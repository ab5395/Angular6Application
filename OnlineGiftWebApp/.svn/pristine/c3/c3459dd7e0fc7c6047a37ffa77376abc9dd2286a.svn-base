import { Component, OnInit } from '@angular/core';
import { FormBuilder,  Validators } from '@angular/forms';
import { ValidationService } from "../../shared/services/validation.service"
import { LoginModel } from "./login.model";
import { LoginService } from "./login.service";
import { AppConfig } from "../../app.config";
import { Router } from "@angular/router";
import { MatSnackBar } from "@angular/material";
import { NotificationService } from '../../shared/services/notification.service';
import { Role } from '../../shared/models/role.enum';
//import { ErrorData } from '../error/error.data';
import { AppRoute } from '../../shared/AppRoute';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
  providers: [LoginService]
})
export class LoginComponent implements OnInit {
  frmLogin: any;
  notificationService: NotificationService;
  appConfig: AppConfig = new AppConfig();
  isProgressVisible: boolean = false;
  isBtnDisabled: boolean = false;
  constructor(
    private formBuilder: FormBuilder,
    private loginService: LoginService,
    private _router: Router,
    private snb: MatSnackBar,
    //private errorData: ErrorData
  ) {
    this.notificationService = new NotificationService(snb);
    this.frmLogin = this.formBuilder.group({
      'email': ['', [Validators.required, ValidationService.emailValidator]],
      'password': ['', [Validators.required]]
    });
    this.appConfig.removeCurrentUser();
  }

  ngOnInit() {
    document.documentElement.setAttribute('data-agent', navigator.userAgent);
  }

  login() {
    let model: LoginModel = new LoginModel();
    model.email = this.frmLogin.value.email;
    model.password = this.frmLogin.value.password;
    
    if (this.frmLogin.dirty && this.frmLogin.valid) {
      this.isProgressVisible = true;
      this.isBtnDisabled = true;
      this.loginService.doLogin(model).subscribe(result => {
        
        this.isProgressVisible = false;
        this.isBtnDisabled = false;
        if (result.status === true) {
          this.appConfig.setCurrentUser(result.data);
          let currUser = this.appConfig.getCurrentUser();
          if (currUser != null && currUser.role === Role.User)
            this._router.navigate([AppRoute.home]);
          else
            this._router.navigate([AppRoute.home]);
        }
        else if (result.status === false) {
          this.notificationService.showNotification(result.message);
        }
        else {
          this.notificationService.showNotification("Some error occured while processing your request!! Please try again");
        }
      });
    };
  }

}
