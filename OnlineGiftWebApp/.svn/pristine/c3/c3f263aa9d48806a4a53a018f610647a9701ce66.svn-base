import { Component, ElementRef, NgZone, OnInit, ViewChild } from '@angular/core';
import { MapsAPILoader } from '@agm/core';
import { FormBuilder, Validators, FormGroup } from '@angular/forms';
import { ValidationService } from "../../shared/services/validation.service"
import { RegisterModel } from "./register.model";
import { RegisterService } from "./register.service";
import { AppConfig } from "../../app.config";
import { Router } from "@angular/router";
import { MatSnackBar } from "@angular/material";
import { NotificationService } from '../../shared/services/notification.service';
//import { ErrorData } from '../error/error.data';
import { AppRoute } from '../../shared/AppRoute';
import { } from 'googlemaps';
import { LocationHelper } from '../../shared/location.helper';

@Component({
  selector: 'app-register',
  templateUrl: './register.component.html',
  styleUrls: ['./register.component.css'],
  providers: [RegisterService]
})

export class RegisterComponent implements OnInit {
  frmRegister: any;
  isBtnDisabled: boolean = false;
  notificationService: NotificationService;
  appConfig: AppConfig = new AppConfig();
  isProgressVisible: boolean = false;
  locationObject: any = {};
  locationStr: string; //Google place location

  @ViewChild("search")
  public searchElementRef: ElementRef;
  constructor(
    private mapsApiLoader: MapsAPILoader,
    private ngZone: NgZone,
    private formBuilder: FormBuilder,
    private registerService: RegisterService,
    private _router: Router,
    private snb: MatSnackBar
  ) {
    this.notificationService = new NotificationService(snb);
    this.frmRegister = this.formBuilder.group({
      'username': ['', [Validators.required, ValidationService.emailValidator]],
      'password': ['', [Validators.required, ValidationService.passwordValidator]],
      'confirmPassword': ['', [Validators.required]],
      'location': ['', [Validators.required]],
      'firstName': ['', [Validators.required]],
      'lastName': ['', [Validators.required]]
    });
    this.appConfig.removeCurrentUser();
  }

  ngOnInit() {
    //let place: google.maps.places.PlaceResult;
    this.mapsApiLoader.load().then(() => {
      let autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, {
        types: []
      });

      autocomplete.addListener("place_changed", () => {
        this.ngZone.run(() => {
          let place: google.maps.places.PlaceResult = autocomplete.getPlace();
          this.locationObject = LocationHelper.prepareLocationData((place) as any);
          console.log(this.locationObject);
          if (place.geometry === undefined || place.geometry === null) {
            return;
          }
        });
      });
    });
  }

  register() {
    let model: RegisterModel = new RegisterModel();
    model.username = this.frmRegister.value.username;
    model.password = this.frmRegister.value.password;
    model.firstName = this.frmRegister.value.firstName;
    model.lastName = this.frmRegister.value.lastName;
    model.location = this.frmRegister.value.location;
    model.role = "User";
    if (this.frmRegister.dirty && this.frmRegister.valid) {
      this.isProgressVisible = true;
      this.isBtnDisabled = true;
      this.registerService.doRegister(model).subscribe(result => {
        debugger;
        this.isProgressVisible = false;
        this.isBtnDisabled = false;
        if (result.status === true) {
          // this.notificationService.showNotification("User Created Successfully.Please Check your Email to confirm your account.");
          this._router.navigateByUrl(AppRoute.registersuccess);
        }
        else if (result.status === false) {
          this.notificationService.showNotification(result.message);
        }
        else {
          this.notificationService.showNotification("Some error occured while processing your request!! Please try again");
        }
      });
    };
  }

}
